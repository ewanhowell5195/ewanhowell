{
  "links": {
    "examples": ["example-random-entity-textures"],
    "documentation": [
      {
        "text": "Official Documentation",
        "link": "https://github.com/sp614x/optifine/blob/master/OptiFineDoc/doc/random_entities.properties"
      },
      {
        "text": "OptiDocs Documentation",
        "link": "https://optifine.readthedocs.io/random_entities.html"
      }
    ],
    "video": "5bF6dxnmPNQ",
    "other": [
      {
        "text": "regex101",
        "link": "https://regex101.com/"
      },
      {
        "text": "DenCode Unicode Escape",
        "link": "https://dencode.com/en/string/unicode-escape" 
      },
      {
        "text": "Biome IDs",
        "link": "https://minecraft.fandom.com/wiki/Biome#Biome_IDs"
      },
      {
        "text": "SNBT Lint",
        "link": "https://www.soltoder.com/NBTLint/"
      }
    ]
  },
  "content": [
    {
      "type": "heading",
      "text": "What are Random Entity Textures?"
    },
    "Random Entity Textures are an OptiFine feature that allow you to add texture variants to entities. These variants can be randomised, or set to appear when certain conditions are met.",
    {
      "type": "heading",
      "text": "How to create Random Entity Textures"
    },
    {
      "type": "step",
      "text": "Creating the random entity folder",
      "step": 1
    },
    "Inside your resource pack, create the folder: `assets/minecraft/optifine/random/entity`.",
    {
      "type": "step",
      "text": "Adding a variant",
      "step": 2
    },
    "Add your first variant to the newly created `random/entity` folder. The texture needs to be named the same as the vanilla texture, but with the number `2` after it, for example: `chicken.png` will become `chicken2.png`.",
    {
      "type": "image",
      "name": "first",
      "height": 114
    },
    "If the texture already ends with a number, you add a `_2` instead, for example: `tropical_a_pattern_1.png` will become `tropical_a_pattern_1_2.png`.",
    "The `random/entity` folder is structured identically to the `assets/minecraft/textures/entity` folder. This means that if your texture is located inside the `textures/entity/cow/` folder, its variants will need to be put inside `random/entity/cow/` folder.",
    {
      "type": "image",
      "name": "folder",
      "height": 114
    },
    "Test the pack! You have just created your first texture variant. You should see the normal texture 50% of the time, and your new variant the other 50%.",
    {
      "type": "image",
      "name": "50_50"
    },
    {
      "type": "step",
      "text": "More variants",
      "step": 3
    },
    "If you want to create more variants, just add more textures to the random entity folder. For a second and third variant for example, you would create `chicken3.png` and `chicken4.png`. Adding these extra two variants would mean each variant now has a 25% chance to appear.",
    {
      "type": "image",
      "name": "more",
      "height": 172
    },
    {
      "type": "step",
      "text": "Creating a properties file",
      "step": 4
    },
    "A properties file can be used to customise the randomisation and add conditions for when variants should appear.",
    "To create a properties file, create a normal text file next to your variants, and change `.txt` to `.properties`. The properties file needs to be named to match the name of the texture you are adding variants to. For example: `chicken.png` will use `chicken.properties`",
    {
      "type": "image",
      "name": "properties",
      "height": 126
    },
    "If you have file name extensions hidden, make sure to enable them so you can rename it properly. On Windows 11, this can be done from `View > Show > File name extensions`",
    {
      "type": "image",
      "name": "file_names",
      "height": 400
    },
    {
      "type": "step",
      "text": "Properties formatting",
      "step": 5
    },
    "Random entity textures properties files contain rules. Each rule defines how and when variants should be loaded.",
    "Every line of a rule follows the formatting `property.&ltn&gt=value`, where `property` is the property you are adding to the rule, `&ltn&gt` is the number of the current rule, and `value` is what that property needs to be set to for the rule to be met.",
    "Here is an example of a single rule. The `textures` property is the only required property for a rule, and defines what textures will follow the rule. Texture `1` is the normal texture, and the other numbers are the variants inside your `random/entity` folder.",
    {
      "type": "codeblock",
      "text": "textures.1=1 2 3\nweights.1=5 4 1\nbiomes.1=plains",
      "name": "chicken.properties"
    },
    "Rules are loaded from top to bottom, meaning that rules at the top of the file are checked first. The first rule where all its conditions are met will be the rule that applies. Remember, if a rule has no conditions, it will ALWAYS apply, as long as no other rules get applied before it. If no rules get applied, no variants will get loaded and normal texture will be the one that loads.",
    {
      "type": "step",
      "text": "Properties examples",
      "step": 6
    },
    "Below are some examples of different rules that you can use.",
    {
      "type": "tabs",
      "tabs": [
        {
          "name": "Weights",
          "content": [
            "Weights are a way of changing how often a randomised variant will appear.",
            {
              "type": "codeblock",
              "text": "textures.1=1 2 3\nweights.1=5 4 1",
              "name": "chicken.properties"
            },
            "For weights to work, you need the same number of weights on a rule as the number of textures belonging to a rule. In the example above, there are 3 textures on rule 1, so there are 3 weights.",
            "In this example, if you add up all the weights, they total to 10. This means that variant 1 has a `5/10` chance to appear, so a `50%` chance. Variant 2 has a `4/10` chance, so its `40%` likely to appear. Variant 3 has a `1/10` chance, so it has a `10%` chance to appear.",
            {
              "type": "image",
              "name": "weights"
            },
            "Weights can add up to be any number, but whatever number they add up to will become the denominator of the fraction used to calculate the chance the variant has to appear."
          ]
        },
        {
          "name": "Names",
          "content": [
            "Variants can be set to appear when the entity's name matches a required name.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nname.1=James",
              "name": "chicken.properties"
            },
            "In the example above, variant 2 will only be shown when the entity is named `James`.",
            {
              "type": "image",
              "name": "names"
            },
            "By default, names are case sensitive, and must match exactly what was provided in the rule, however there are some things you can do to fix that.",
            {
              "type": "heading",
              "text": "pattern"
            },
            "`pattern` is a special prefix you can use before a name that allows you to do more advanced matches. To use the `pattern`, simply add `pattern:` at the start of the name.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nname.1=pattern:James",
              "name": "chicken.properties"
            },
            {
              "type": "tabs",
              "tabs": [
                {
                  "name": "Case Insensitive",
                  "content": [
                    "To make the name case insensitve, so that it works with and without capital letters, use the prefix `ipattern`.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=ipattern:james",
                      "name": "chicken.properties"
                    },
                    "This example will work with `James`, `james`, `JAMES`, `jAmEs`, etc..."
                  ]
                },
                {
                  "name": "Wildcards",
                  "content": [
                    "Wildcards are special characters that allow your name to include characters you didn't specify in the original name.",
                    {
                      "type": "tablelist",
                      "rows": [
                        ["`?`", "Any character."],
                        ["`*`", "Any character any number of times."]
                      ]
                    },
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=pattern:?ary",
                      "name": "chicken.properties"
                    },
                    "In this example, since the `?` means any character, the names `Gary`, `Mary`, and `Bary` are all valid.",
                    "Even though the example above is case sensitive, the `?` itself allows any character, no matter the case, so `gary`, `mary`, and `bary` are also valid.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=pattern:*Gary*",
                      "name": "chicken.properties"
                    },
                    "The `*` means any character any number of times. In the above example, the `*` allows the name to include any text before or after the name, for example: `I am Gary!`, `Gary is my name`, or even `My name is Gary but you can call me Gary`.",
                    "The `*` wildcard also allows 0 characters to be present, which means just the name `Gary` with nothing either side will still work."
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "text": "regex"
            },
            "`regex` is another special prefix that you can use before a name to do more advanced matching. `regex` is much more powerful than `pattern`, but also much more complicated, so this guide will only touch on the basics.",
            {
              "type": "tablelist",
              "rows": [
                ["`.`", "Any character."],
                ["`\\\\d`", "Any numeric digit."],
                ["`()`", "A group, groups things together."],
                ["`[]`", "A list of characters."],
                ["`*`", "The previous thing can appear 0-Infinity times."],
                ["`+`", "The previous thing can appear 1-Infinity times."],
                ["`|`", "OR operator."],
                ["`?`", "Make the previous thing optional (Behaviour can change depending what it is behind, but most of the time it is this)."]
              ]
            },
            {
              "type": "tabs",
              "tabs": [
                {
                  "name": "Case Insensitive",
                  "content": [
                    "To make the name case insensitve, so that it works with and without capital letters, use the prefix `iregex`.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=iregex:james",
                      "name": "chicken.properties"
                    },
                    "This example will work with `James`, `james`, `JAMES`, `jAmEs`, etc..."
                  ]
                },
                {
                  "name": "Multiple Names",
                  "content": [
                    "You can use regex to allow multiple names to be valid, by using the OR operator.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:James|Gary|Gabriel",
                      "name": "chicken.properties"
                    },
                    "The above example is saying: **James OR Gary OR Gabriel**, meaning that the names `James`, `Gary`, and `Gabriel` would all be valid.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:Gary (Smith|Adams)",
                      "name": "chicken.properties"
                    },
                    "You can use groups to make only part of the name work with multiple words.",
                    "This example means: **Gary AND (Smith OR Adams)**, meaning that both of the names `Gary Smith` and `Gary Adams` will be valid."
                  ]
                },
                {
                  "name": "Wildcards",
                  "content": [
                    "Wildcards are special characters that allow your name to include characters you didn't specify in the original name.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:.ary",
                      "name": "chicken.properties"
                    },
                    "In this example, since the `.` means any character, the names `Gary`, `Mary`, and `Bary` are all valid.",
                    "Even though the example above is case sensitive, the `.` itself allows any character, no matter the case, so `gary`, `mary`, and `bary` are also valid.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:.*Gary.*",
                      "name": "chicken.properties"
                    },
                    "The `*` means that the previous thing can appear 0-Infinity times, so when paired with `.` to make `.*`, it means any character any number of times. In the above example, this allows the name to include any text before or after, for example: `I am Gary!`, `Gary is my name`, or even `My name is Gary but you can call me Gary`."
                  ]
                },
                {
                  "name": "Character Lists",
                  "content": [
                    "When a word is one character different from another word, and you want to support both characters, you can use a list of characters.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:[fghmw]ood",
                      "name": "chicken.properties"
                    },
                    "In this example, since the `[]` means that the character in that position can be any in that list, so the names `food`, `good`, `hood`, `mood`, and `wood` are all valid.",
                    "You can use `-` in a character list to show a range of characters, for example `[a-z0-9]` means any character from a-z and any digit from 0-9."
                  ]
                },
                {
                  "name": "Optional Characters",
                  "content": [
                    "You can use a `?` after a character to make it optional.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=regex:Seeds?",
                      "name": "chicken.properties"
                    },
                    "Here, the `s` is followed by `?` making it optional. Both the names `Seed` and `Seeds` are valid here."
                  ]
                },
                {
                  "name": "Mixing Together",
                  "content": [
                    "Here is an example of a regex pattern where the other examples have all been combined into one.",
                    {
                      "type": "codeblock",
                      "text": "textures.1=2\nname.1=iregex:ja(mes|ck) .*[ghw]oods?",
                      "name": "chicken.properties"
                    },
                    "This regex pattern is case insensitive, and matches names that start with `ja` followed by either `mes` or `ck`, then followed by a space with any characters after it, and then ends with `good`, `hood`, or `wood` with an optional `s` at the end.",
                    "Some (but not all) examples that would match this regex:",
                    {
                      "type": "tablelist",
                      "rows": [
                        ["`James Good`"],
                        ["`Jack is in the hood`"],
                        ["`James got lost in the woods`"],
                        ["`jAcK eNtErEd AdUlThOoD`"]
                      ]
                    }
                  ]
                }
              ]
            },
            "If you would like to use any regex special characters as normal characters within your name, for example using a `?`, you need to escape it. To escape a character, add a `\\\\` in front of it: `\\\\?`. If you want to use a `\\` in your name, you need to put four `\\` in a row: `\\\\\\\\`.",
            "You can use [regex101](https://regex101.com/) set to the \"Java 8\" flavour to test your regex. In regex101, you will need to half the number of `\\` that you have in your regex. This means that if you have: `\\\\d`, that would become `\\d` when it is in regex101.",
            "It is recommended to use `pattern` rather than `regex` whenever possible due to it being faster to process.",
            {
              "type": "heading",
              "text": "Unicode Characters"
            },
            "Most unicode characters, like characters with accents (`é`, `â`, `ç`), are not supported in properties files. You instead need to use their escape sequence.",
            "You can use [DenCode Unicode Escape](https://dencode.com/en/string/unicode-escape) to convert unicode characters into their escape sequence. For example, `é` becomes `\\u00E9`",
            {
              "type": "codeblock",
              "text": "textures.1=2\nname.1=José",
              "name": "chicken.properties"
            },
            "The example above is invalid, since it contains unsupported unicode characters. The example below is the corrected version using unicode escape sequences.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nname.1=Jos\\u00E9",
              "name": "chicken.properties"
            },
            {
              "type": "heading",
              "text": "Special Formatting"
            },
            "By default, any special formatting in entity names, like colour or bold text, is stripped out. This means they are treated as if the formatting is not there, so a normal name match will also work for those special names.",
            "If you want a variant to only appear when special formatting is present, then your properties file needs to be changed to detect that.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.CustomName=raw:'{\"color\":\"blue\",\"extra\":[{\"italic\":true,\"color\":\"red\",\"text\":\"am \"},{\"bold\":true,\"color\":\"gold\",\"text\":\"Gary\"}],\"text\":\"I \"}'",
              "name": "chicken.properties"
            },
            {
              "type": "image",
              "name": "formatting"
            },
            "In the example above, an NBT check is used on the `CustomName` NBT of the entity. The `raw:` prefix is used to make sure we are checking the entity's raw NBT data without any of the formatting data getting stripped out.",
            "To find what data to put in properties file to make it match your entity's name, you can use the Minecraft command\n`/data get entity @e[type=!player,limit=1,sort=nearest]` while standing next to the entity. The NBT data will appear in the chat and in the games output log if you have that open. You can use [SNBT Lint](https://www.soltoder.com/NBTLint/) to view and format your NBT data.",
            "This example is using an exact match, where the name must be identical to the data in the properties file. `pattern` and `regex` rules can still be used with this method, but it will be a lot more complicated. Here are two examples of that:",
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.CustomName=raw:pattern:*{\"bold\":true,\"color\":\"gold\",\"text\":\"Gary\"}*",
              "name": "chicken.properties"
            },
            "This example uses `pattern` to allow any text to appear around a **bold** and <span style=\"color:gold\">gold</span> `Gary`.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.CustomName=raw:regex:.*\\\\{\"bold\":true,\"color\":\"gold\",\"text\":\"(Gary|James)\"\\\\}.*",
              "name": "chicken.properties"
            },
            "This example uses `regex` to allow any text to appear around a **bold** and <span style=\"color:gold\">gold</span> `Gary` or `James`.",
            "Since `{}` are special characters in regex, they need to be escaped here with `\\\\`."
          ]
        },
        {
          "name": "Biomes",
          "content": [
            "You can set it so that variants will only appear when the entity spawns in a certain biome.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nbiomes.1=mushroom_fields\n\ntextures.2=3 4\nbiomes.2=forest birch_forest dark_forest",
              "name": "chicken.properties"
            },
            "In the above example, variant 2 will be visible if the entity spawned within a `mushroom_fields` biome.",
            {
              "type": "image",
              "name": "mushroom_fields"
            },
            "Variants 3 and 4 will be visible if spawned within a `forest`, `birch_forest`, or `dark_forest` biome.",
            {
              "type": "image",
              "name": "forest"
            },
            "You can find a list of all valid biome IDs on the [Minecraft Wiki](https://minecraft.fandom.com/wiki/Biome#Biome_IDs).",
            "*Please note that biome variants are not permanent, and will be lost if the entity leaves the biome and gets unloaded. Any entity that wonders into the biome will become the biome variant upon getting reloaded, unless another variant overwrites the biome variant.*"
          ]
        },
        {
          "name": "Heights",
          "content": [
            "Variants can be configured to show when the entity spawns at a certain Y level.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nheights.1=64 75",
              "name": "chicken.properties"
            },
            "In the above example, variant 2 will be visible if the entity spawned at either Y level `64` or `75`.",
            {
              "type": "image",
              "name": "heights"
            },
            {
              "type": "codeblock",
              "text": "textures.1=2\nheights.1=32-64 96-128",
              "name": "chicken.properties"
            },
            "If you want the variant to appear at multiple Y levels, you can provide them in a range. In this example, the variant can appear anywhere within `32` to `64`, and again within `96` to `128`.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nheights.1=(-32)-(-20)\n\ntextures.2=3\nheights.2=(-10)-10",
              "name": "chicken.properties"
            },
            "For negative heights in a range, they must use brackets around the negative numbers.",
            "*Please note that height variants are not permanent, and will be lost if the entity leaves the Y level and gets unloaded. Any entity that wonders into the Y level will become the height variant upon getting reloaded, unless another variant overwrites the height variant.*"
          ]
        },
        {
          "name": "NBT Data",
          "content": [
            "Certain NBT tags can be used to trigger variant textures.",
            {
              "type": "heading",
              "text": "Disclaimer"
            },
            "Not all NBT tags can be used. Minecraft runs using a server/client setup, even in singleplayer. Since OptiFine is a client side mod, it only has access to the data that is sent to the client from the server. If the NBT data is only server side and not client side, it cannot be used in random entity textures.",
            "A good rule of thumb is: If you can see the NBT tag make a visible change to the entity, there is an 80% chance you can use that NBT tag, otherwise there is an 80% chance you cannot use that NBT tag.",
            "There is no list of what NBT works and what doesn't. You will just have to try it and see.",
            {
              "type": "heading",
              "text": "Formatting"
            },
            "NBT rules in properties files do not follow the standard rule format. These follow the formatting `nbt.&ltn&gt.rulePath=value`, where `rulePath` is the full path of the NBT data that you want to match.",
            {
              "type": "heading",
              "text": "Examples"
            },
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.carriedBlockState.Name=minecraft:grass_block",
              "name": "wolf.properties"
            },
            "The example above will change the enderman's texture depending on the block they are carrying. This variant will only appear when an enderman is carrying a block with the name `minecraft:grass_block`.",
            {
              "type": "image",
              "name": "endermen"
            },
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.Owner=raw:[I;-752984630,-84193701,-1156533939,-6439798]",
              "name": "wolf.properties"
            },
            "This example uses the `Owner` NBT tag to change the wolf's texture based on its owner. The owner in the NBT data is the owners account UUID, so this variant will only appear when the owner is `ewanhowell5195`.",
            "The `raw:` prefix is required for this one to get the `Owner` tag as a raw NBT string. This is because normally the `Owner` tag is in a special format that cannot be matched from a properties file, so the `raw:` prefix is used to convert it into a format that we can match. If there are spaces in the NBT data, and the NBT data isn't normal text, these spaces are normally removed when using the `raw:` prefix.",
            {
              "type": "image",
              "name": "wolves"
            },
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.Rotation.0=range:0-90",
              "name": "wolf.properties"
            },
            "The `range:` prefix can be used with numbers to allow for a range of numbers. In the example above, the zombie will gain the variant when it is rotated anywhere beween `0` and `90` degrees in the world. For negative numbers in ranges, you must put brackets around the negative number, for example: `range:(-90)-(-45)`.",
            {
              "type": "image",
              "name": "zombies"
            },
            {
              "type": "heading",
              "text": "Finding the NBT path"
            },
            "The NBT path that you use depends on the NBT structure of the entity.",
            "To view the NBT data of an entity, you can use the command `/data get entity @e[type=!player,limit=1,sort=nearest]` while standing next to the entity. The NBT data will appear in the chat and in the games output log if you have that open. You can use [SNBT Lint](https://www.soltoder.com/NBTLint/) to view and format your NBT data.",
            "Once you have your NBT data, you can then figure out what the NBT path is.",
            "Here is the NBT data of an enderman, this NBT data has been simplied and formatted:",
            {
              "type": "codeblock",
              "text": "{\n  Brain: {\n    memories: {}\n  },\n  UUID: [I; 757022274, -1308471354, -1483030689, 1006948643],\n  carriedBlockState: {\n    Properties: {\n      snowy: \"false\"\n    },\n    Name: \"minecraft:grass_block\"\n  }\n}",
              "name": "enderman.nbt"
            },
            "To find the path of the NBT data that we want to use, we follow the NBT data inwards, noting down the name of each property as it goes in until we get to our desired NBT data.",
            "If we were to try finding the NBT path for the carried block name, we start at the top, and work our way down until we find `carriedBlockState`. This is the first property that is in the outermost indentation level that contains our desired NBT data. We skipped `Brain` and `UUID` because the block name we want is not inside those. Next we go down, skipping over `Properties`, until we get to `Name`, which is the NBT data that we want to get. Add all those together with a `.` inbetween and we get `carriedBlockState.Name` as the NBT path.",
            "Here is another example. This is the NBT data of a zombie holding a named diamond sword:",
            {
              "type": "codeblock",
              "text": "{\n  Brain: {\n    memories: {}\n  },\n  UUID: [I; 109289731, 1038303974, -1154097412, -435742089],\n  HandItems: [\n    {\n      id: \"minecraft:diamond_sword\",\n      Count: 1b,\n      tag: {\n        Damage: 0,\n        display: {\n          Name: '{\"text\":\"My Epic Sword\"}'\n        }\n      }\n    },\n    {}\n  ]\n}",
              "name": "zombie.nbt"
            },
            "To find path to the held item's name, you would start by looking down the properties until you find `HandItems`, which is the block that contains the desired NBT data. Now `HandItems` is different, as it is a list. You can tell because it has the `[]` brackets. For a list, you can either add the index of the item in the list to the NBT path, or `*` to it, which means any position in the list. For this example, lets add `0` to our path, since `0` is the first index in a list, so that it only works when held in the main hand. Next we look down until we find `tag`, then we keep going to `display`, then the last thing is `Name`. This would make the full NBT path `HandItems.0.tag.display.Name`.",
            "Here is an example of a properties file that only works for a zombie holding a diamond sword named `My Epic Sword` in its main hand:",
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.HandItems.0.id=minecraft:diamond_sword\nnbt.1.HandItems.0.tag.display.Name=raw:'{\"text\":\"My Epic Sword\"}'",
              "name": "zombie.properties"
            },
            "The one above needs `raw:` on the name to work with the shown NBT data due to how OptiFine handles entity and item names. The example below shows how it would be formatted for the name without the `raw:` prefix.",
            {
              "type": "codeblock",
              "text": "textures.1=2\nnbt.1.HandItems.0.id=minecraft:diamond_sword\nnbt.1.HandItems.0.tag.display.Name=My Epic Sword",
              "name": "zombie.properties"
            }
          ]
        },
        {
          "name": "Combining Properties",
          "content": [
            "Properties can be combined together to create more advanced rules.",
            {
              "type": "codeblock",
              "text": "textures.1=2 3 4\nheights.1=32-64\nbiomes.1=warm_ocean lukewarm_ocean deep_lukewarm_ocean\nweights.1=49 49 2\n\ntextures.2=1 5",
              "name": "squid.properties"
            },
            "In this rule, the variants `2`, `3`, and `4` will only appear in warm ocean biomes between the heights `32` to `64`. Variant 2 and 3 will both have a 49% chance of spawning, where as variant 4 will have a 2% chance of spawning.",
            "When the first rule is not met, it will go onto the second rule, which will not fail as it has no conditions. With this rule, variants 1 and 5 will each have a 50% chance to appear."
          ]
        }
      ]
    },
    "These examples do not cover all the available properties. Please refer to the [OptiFine documentation](https://github.com/sp614x/optifine/blob/master/OptiFineDoc/doc/random_entities.properties) for a full list of available properties.",
    {
      "type": "heading",
      "text": "Common mistakes"
    },
    "Here are some common mistakes that people make:",
    {
      "type": "step",
      "text": "Wrong properties order",
      "step": 1
    },
    "The order of rules is important, make sure you put them in the correct order.",
    {
      "type": "codeblock",
      "text": "textures.1=2 3 4\nweights.1=5 1 3\n\ntextures.2=5 6\nbiomes.2=plains forest",
      "name": "cow.properties"
    },
    "The second rule in the above example will never trigger, since the first rule has no requirements and will therefore never fail.",
    {
      "type": "codeblock",
      "text": "textures.1=2\nbiomes.2=cherry_grove\n\ntextures.2=3\nname.2=ipattern:Harry",
      "name": "rabbit.properties"
    },
    "If a rabbit gets named `Harry` in a cherry grove biome, the variant will not show, since the first rule has all its conditions met and takes priority.",
    {
      "type": "step",
      "text": "Wrong file locations",
      "step": 2
    },
    "Make sure your `random/entity` is an **exact** mirror of the `textures/entity` folder. Also make sure your file names match the exact file names from the `textures/entity` folder.",
    "**Incorrect**:\n`textures/entity/cow/cow.png` → `random/entity/cow2.png`\n`textures/entity/armor_stand/wood.png` → `random/entity/armor_stand/armor_stand2.png`",
    "**Correct**:\n`textures/entity/cow/cow.png` → `random/entity/cow/cow2.png`\n`textures/entity/armor_stand/wood.png` → `random/entity/armor_stand/wood2.png`",
    {
      "type": "step",
      "text": "Skipping & misordering numbers",
      "step": 3
    },
    "Skipping rule numbers, and putting them in the wrong order, can cause your variants to break and not load in game. Make sure you do not skip numbers and have them all in the correct order.",
    "**Incorrect:**",
    {
      "type": "codeblock",
      "text": "textures.10=2 3 4\nbiomes.10=forest\n\ntextures.24=5 6\nname.24=Bob",
      "name": "zombie.properties"
    },
    {
      "type": "codeblock",
      "text": "textures.3=4 6\nheights.3=64-75\n\ntextures.2=5\nname.2=Amy\n\ntextures.1=1 2 3",
      "name": "drowned.properties"
    },
    "**Correct:**",
    {
      "type": "codeblock",
      "text": "textures.1=2 3 4\nbiomes.1=forest\n\ntextures.2=5 6\nname.2=Bob",
      "name": "zombie.properties"
    },
    {
      "type": "codeblock",
      "text": "textures.1=4 6\nheights.1=64-75\n\ntextures.2=5\nname.2=Amy\n\ntextures.3=1 2 3",
      "name": "drowned.properties"
    },
    {
      "type": "heading",
      "text": "Limitations"
    },
    "Unfortunately, not all entities support random entity textures. For example, as of OptiFine 1.20.1 I6 pre6, the Ender Dragon and Paintings do not support them. Before assuming that an entity does and does not support them, make sure to test with an entity that is known to work, for example a creeper.",
    "Vanilla emissive textures do not support random entity textures. These are textures like enderman eyes, spider eyes, phantom eyes, etc. As a fix to this issue, i recommended instead making the vanilla textures and replacing them with OptiFine emissive textures. For more information on emissive textures, view the [Emissive Textures guide](/guides/emissive-textures)"
  ]
}